Task:

Bikin Api sederhana,

âœ”  -Login 
âœ”  -Register 
-Daftar mahasiswa
-Daftar dosen
-Daftar mata kuliah
-Dosen punya relasi dgn matakuliah, jadi dosen itu ngarjar apa
-Daftar kelas, jadi mahasiswa ini sekarang ada di kelas apa

------------------------------------------------------------------------

Berikut adalah contoh skrip SQL untuk membuat tabel di PostgreSQL menggunakan `psql` (PostgreSQL CLI). Struktur tabel ini sesuai dengan skenario yang Anda minta:

// ### Membuat Tabel `users` âœ”
```sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) CHECK (role IN ('admin', 'mahasiswa', 'dosen')) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Membuat Tabel `mahasiswa`
```sql
CREATE TABLE mahasiswa ( âœ”
    id SERIAL PRIMARY KEY,
    // user_id INT NOT NULL,
    nama VARCHAR(255) NOT NULL,
    nim VARCHAR(50) UNIQUE NOT NULL,
    jurusan VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
```

### Membuat Tabel `dosen` âœ”
```sql
CREATE TABLE dosen (
    id SERIAL PRIMARY KEY,
    // user_id INT NOT NULL,
    nama VARCHAR(255) NOT NULL,
    nidn VARCHAR(50) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
```

### Membuat Tabel `mata_kuliah` âœ”
```sql
CREATE TABLE mata_kuliah (
    id SERIAL PRIMARY KEY,
    kode VARCHAR(50) UNIQUE NOT NULL,
    nama VARCHAR(255) NOT NULL,
    // dosen_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (dosen_id) REFERENCES dosen(id) ON DELETE CASCADE
);
```

### Membuat Tabel `kelas` âœ”
```sql
CREATE TABLE kelas (
    id SERIAL PRIMARY KEY,
    kode VARCHAR(50) UNIQUE NOT NULL,
    nama VARCHAR(255) NOT NULL,
    // mata_kuliah_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (mata_kuliah_id) REFERENCES mata_kuliah(id) ON DELETE CASCADE
);
```

### Membuat Tabel Relasi `kelas_mahasiswa` âœ”
```sql
CREATE TABLE kelas_mahasiswa (
    id SERIAL PRIMARY KEY,
    kelas_id INT NOT NULL,
    mahasiswa_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (kelas_id) REFERENCES kelas(id) ON DELETE CASCADE,
    FOREIGN KEY (mahasiswa_id) REFERENCES mahasiswa(id) ON DELETE CASCADE
);
```

### Penjelasan:
1. **Tabel `users`** mengelola autentikasi pengguna dan peran (admin, mahasiswa, dosen).
2. **Tabel `mahasiswa` dan `dosen`** terkait dengan tabel `users` melalui kolom `user_id`.
3. **Tabel `mata_kuliah`** memiliki relasi dengan tabel `dosen`.
4. **Tabel `kelas`** memiliki relasi dengan tabel `mata_kuliah`.
5. **Tabel `kelas_mahasiswa`** digunakan untuk mendefinisikan hubungan banyak-ke-banyak antara mahasiswa dan kelas.

Skrip ini dapat Anda eksekusi langsung di PostgreSQL CLI. Jika Anda memiliki kebutuhan tambahan atau pertanyaan, beri tahu saya! ðŸ˜Š

------------------------------------------------------------------------
------------------------------------------------------------------------
Step:

.Create folder sisfo-api & open to vscode 
.Initialization npm [npm init -y]
.Create .gitignore so that dependencies aren't uploaded to git/github [node_modules]
.Create index.js
.Install express js using npm [npm i express]
.Use library express on index.js 
.Install package nodemon so that server not have restart when any there changes code [npm i nodemon -D]

.Initialization git for version controll system [git init]
.Create new repo on github and then initialization git remote  
    [git remote add origin https://github.com/mimamc95/sisfo-api.git]
    [git branch -M master]
    [git push -u origin master]
.Create folder routes & create index.js
    #getStudentById
    .Make dir routes, create router endpoint into index.js, create function for controller getStudentById
    .Make dir controller, create function getStudentById
    .Implementation & using into routes/index.js

.Instalation postgres [npm install --save pg pg-hstore]
.Instalation devDependance sequelize-cli [npm install --save-dev sequelize-cli]
.Initialization sequelize-cli [npx sequelize-cli init]
.Create db from sequelize-cli [npx sequelize-cli db:create]
.Open the database
    [psql --host=localhost --port=5432 --dbname=sisfo_api_development --username=postgres --password]
